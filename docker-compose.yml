services:
  config-server:
    build:
      context: ./config-server
      dockerfile: Dockerfile
    container_name: config-server
    ports:
      - "8888:8888"
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE:-dev}
      - CONFIG_SERVER_PASSWORD=${CONFIG_SERVER_PASSWORD:-configpassword}
    networks:
      - uguimar-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "--user", "configuser:${CONFIG_SERVER_PASSWORD:-configpassword}", "http://localhost:8888/actuator/health" ]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 60s

  service-discovery:
    build:
      context: ./service-discovery
      dockerfile: Dockerfile
    container_name: service-discovery
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE:-dev}
      - CONFIG_SERVER_PASSWORD=${CONFIG_SERVER_PASSWORD:-configpassword}
      - SPRING_CONFIG_IMPORT=optional:configserver:http://configuser:${CONFIG_SERVER_PASSWORD:-configpassword}@config-server:8888
    depends_on:
      config-server:
        condition: service_healthy
    networks:
      - uguimar-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 60s

  # AÃ±adir Kafka y Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - uguimar-network
    healthcheck:
      test: [ "CMD-SHELL", "echo 'ruok' | nc -w 2 localhost 2181 || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - uguimar-network
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  mailhog:
    image: mailhog/mailhog:latest
    container_name: mailhog
    ports:
      - "1025:1025" # SMTP server
      - "8025:8025" # Web UI
    networks:
      - uguimar-network
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "1025" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s

  postgres-auth:
    image: postgres:16-alpine
    container_name: postgres-auth
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=auth_db
      - POSTGRES_USER=${DB_USERNAME:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
    volumes:
      - postgres-auth-data:/var/lib/postgresql/data
    networks:
      - uguimar-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USERNAME:-postgres} -d auth_db" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  auth-ms:
    build:
      context: ./auth-ms
      dockerfile: Dockerfile
    container_name: auth-ms
    ports:
      - "8081:8081"
      - "9091:9091"
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE:-dev}
      - CONFIG_SERVER_HOST=config-server:8888
      - CONFIG_SERVER_PASSWORD=${CONFIG_SERVER_PASSWORD:-configpassword}
      - EUREKA_URI=http://service-discovery:8761/eureka/
      - DB_HOST=postgres-auth
      - DB_USERNAME=${DB_USERNAME:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - JWT_SECRET=${JWT_SECRET:-8e03811e9e3cbfdaae5ff8f8e04417e1a50e1d31abb44ebf1ebaf6e7ade6c635}
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      service-discovery:
        condition: service_healthy
      postgres-auth:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - uguimar-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/api/health" ]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 60s

  notifications-ms:
    build:
      context: ./notifications-ms
      dockerfile: Dockerfile
    container_name: notifications-ms
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE:-dev}
      - CONFIG_SERVER_HOST=config-server:8888
      - CONFIG_SERVER_PASSWORD=${CONFIG_SERVER_PASSWORD:-configpassword}
      - EUREKA_URI=http://service-discovery:8761/eureka/
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - MAIL_HOST=smtp.gmail.com
      - MAIL_PORT=587
      - MAIL_USERNAME=plataforma.uguimar@gmail.com
      - MAIL_PASSWORD=lmimvobflqkdqmes
      - MAIL_FROM=Uguimar <plataforma.uguimar@gmail.com>
      - MAIL_SMTP_AUTH=true
      - MAIL_SMTP_STARTTLS=true
    #      - MAIL_HOST=mailhog
    #      - MAIL_PORT=1025
    #      - MAIL_USERNAME=
    #      - MAIL_PASSWORD=
    #      - MAIL_FROM=no-reply@uguimar.com
    depends_on:
      service-discovery:
        condition: service_healthy
      kafka:
        condition: service_healthy
      mailhog:
        condition: service_healthy
      config-server:
        condition: service_healthy
    networks:
      - uguimar-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8082/actuator/health" ]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 60s

volumes:
  postgres-auth-data:
    driver: local

networks:
  uguimar-network:
    driver: bridge